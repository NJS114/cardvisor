/**
 * @fileoverview gRPC-Web generated client stub for report
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.31.0
// source: report.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as report_pb from './report_pb'; // proto import: "report.proto"


export class ReportServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateReport = new grpcWeb.MethodDescriptor(
    '/report.ReportService/CreateReport',
    grpcWeb.MethodType.UNARY,
    report_pb.CreateReportRequest,
    report_pb.ReportReply,
    (request: report_pb.CreateReportRequest) => {
      return request.serializeBinary();
    },
    report_pb.ReportReply.deserializeBinary
  );

  createReport(
    request: report_pb.CreateReportRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.ReportReply>;

  createReport(
    request: report_pb.CreateReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.ReportReply) => void): grpcWeb.ClientReadableStream<report_pb.ReportReply>;

  createReport(
    request: report_pb.CreateReportRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.ReportReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/report.ReportService/CreateReport',
        request,
        metadata || {},
        this.methodDescriptorCreateReport,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/report.ReportService/CreateReport',
    request,
    metadata || {},
    this.methodDescriptorCreateReport);
  }

  methodDescriptorGetReportByAppointmentId = new grpcWeb.MethodDescriptor(
    '/report.ReportService/GetReportByAppointmentId',
    grpcWeb.MethodType.UNARY,
    report_pb.GetReportByAppointmentRequest,
    report_pb.ReportReply,
    (request: report_pb.GetReportByAppointmentRequest) => {
      return request.serializeBinary();
    },
    report_pb.ReportReply.deserializeBinary
  );

  getReportByAppointmentId(
    request: report_pb.GetReportByAppointmentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.ReportReply>;

  getReportByAppointmentId(
    request: report_pb.GetReportByAppointmentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.ReportReply) => void): grpcWeb.ClientReadableStream<report_pb.ReportReply>;

  getReportByAppointmentId(
    request: report_pb.GetReportByAppointmentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.ReportReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/report.ReportService/GetReportByAppointmentId',
        request,
        metadata || {},
        this.methodDescriptorGetReportByAppointmentId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/report.ReportService/GetReportByAppointmentId',
    request,
    metadata || {},
    this.methodDescriptorGetReportByAppointmentId);
  }

  methodDescriptorGetReportDocumentUrl = new grpcWeb.MethodDescriptor(
    '/report.ReportService/GetReportDocumentUrl',
    grpcWeb.MethodType.UNARY,
    report_pb.GetReportDocumentUrlRequest,
    report_pb.GetReportDocumentUrlReply,
    (request: report_pb.GetReportDocumentUrlRequest) => {
      return request.serializeBinary();
    },
    report_pb.GetReportDocumentUrlReply.deserializeBinary
  );

  getReportDocumentUrl(
    request: report_pb.GetReportDocumentUrlRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.GetReportDocumentUrlReply>;

  getReportDocumentUrl(
    request: report_pb.GetReportDocumentUrlRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.GetReportDocumentUrlReply) => void): grpcWeb.ClientReadableStream<report_pb.GetReportDocumentUrlReply>;

  getReportDocumentUrl(
    request: report_pb.GetReportDocumentUrlRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.GetReportDocumentUrlReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/report.ReportService/GetReportDocumentUrl',
        request,
        metadata || {},
        this.methodDescriptorGetReportDocumentUrl,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/report.ReportService/GetReportDocumentUrl',
    request,
    metadata || {},
    this.methodDescriptorGetReportDocumentUrl);
  }

  methodDescriptorUpdateReport = new grpcWeb.MethodDescriptor(
    '/report.ReportService/UpdateReport',
    grpcWeb.MethodType.UNARY,
    report_pb.UpdateReportRequest,
    report_pb.ReportReply,
    (request: report_pb.UpdateReportRequest) => {
      return request.serializeBinary();
    },
    report_pb.ReportReply.deserializeBinary
  );

  updateReport(
    request: report_pb.UpdateReportRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.ReportReply>;

  updateReport(
    request: report_pb.UpdateReportRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.ReportReply) => void): grpcWeb.ClientReadableStream<report_pb.ReportReply>;

  updateReport(
    request: report_pb.UpdateReportRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.ReportReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/report.ReportService/UpdateReport',
        request,
        metadata || {},
        this.methodDescriptorUpdateReport,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/report.ReportService/UpdateReport',
    request,
    metadata || {},
    this.methodDescriptorUpdateReport);
  }

  methodDescriptorGetReportsByUser = new grpcWeb.MethodDescriptor(
    '/report.ReportService/GetReportsByUser',
    grpcWeb.MethodType.UNARY,
    report_pb.GetReportsByUserRequest,
    report_pb.ReportsReply,
    (request: report_pb.GetReportsByUserRequest) => {
      return request.serializeBinary();
    },
    report_pb.ReportsReply.deserializeBinary
  );

  getReportsByUser(
    request: report_pb.GetReportsByUserRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.ReportsReply>;

  getReportsByUser(
    request: report_pb.GetReportsByUserRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.ReportsReply) => void): grpcWeb.ClientReadableStream<report_pb.ReportsReply>;

  getReportsByUser(
    request: report_pb.GetReportsByUserRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.ReportsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/report.ReportService/GetReportsByUser',
        request,
        metadata || {},
        this.methodDescriptorGetReportsByUser,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/report.ReportService/GetReportsByUser',
    request,
    metadata || {},
    this.methodDescriptorGetReportsByUser);
  }

  methodDescriptorVerifyAttachment = new grpcWeb.MethodDescriptor(
    '/report.ReportService/VerifyAttachment',
    grpcWeb.MethodType.UNARY,
    report_pb.VerifyAttachmentRequest,
    report_pb.VerifyAttachmentReply,
    (request: report_pb.VerifyAttachmentRequest) => {
      return request.serializeBinary();
    },
    report_pb.VerifyAttachmentReply.deserializeBinary
  );

  verifyAttachment(
    request: report_pb.VerifyAttachmentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.VerifyAttachmentReply>;

  verifyAttachment(
    request: report_pb.VerifyAttachmentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.VerifyAttachmentReply) => void): grpcWeb.ClientReadableStream<report_pb.VerifyAttachmentReply>;

  verifyAttachment(
    request: report_pb.VerifyAttachmentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.VerifyAttachmentReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/report.ReportService/VerifyAttachment',
        request,
        metadata || {},
        this.methodDescriptorVerifyAttachment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/report.ReportService/VerifyAttachment',
    request,
    metadata || {},
    this.methodDescriptorVerifyAttachment);
  }

  methodDescriptorDeleteAttachment = new grpcWeb.MethodDescriptor(
    '/report.ReportService/DeleteAttachment',
    grpcWeb.MethodType.UNARY,
    report_pb.DeleteAttachmentRequest,
    report_pb.DeleteAttachmentReply,
    (request: report_pb.DeleteAttachmentRequest) => {
      return request.serializeBinary();
    },
    report_pb.DeleteAttachmentReply.deserializeBinary
  );

  deleteAttachment(
    request: report_pb.DeleteAttachmentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<report_pb.DeleteAttachmentReply>;

  deleteAttachment(
    request: report_pb.DeleteAttachmentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: report_pb.DeleteAttachmentReply) => void): grpcWeb.ClientReadableStream<report_pb.DeleteAttachmentReply>;

  deleteAttachment(
    request: report_pb.DeleteAttachmentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: report_pb.DeleteAttachmentReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/report.ReportService/DeleteAttachment',
        request,
        metadata || {},
        this.methodDescriptorDeleteAttachment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/report.ReportService/DeleteAttachment',
    request,
    metadata || {},
    this.methodDescriptorDeleteAttachment);
  }

}

