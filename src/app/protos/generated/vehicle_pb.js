// source: vehicle.proto
/**
 * @fileoverview
 * @enhanceable
 * @suppress {missingRequire} reports error on implicit type usages.
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */
// @ts-nocheck

var jspb = require('google-protobuf');
var goog = jspb;
var global =
    (typeof globalThis !== 'undefined' && globalThis) ||
    (typeof window !== 'undefined' && window) ||
    (typeof global !== 'undefined' && global) ||
    (typeof self !== 'undefined' && self) ||
    (function () { return this; }).call(null) ||
    Function('return this')();

goog.exportSymbol('proto.vehicle.CreateVehicleRequest', null, global);
goog.exportSymbol('proto.vehicle.DeleteReply', null, global);
goog.exportSymbol('proto.vehicle.DeleteVehicleRequest', null, global);
goog.exportSymbol('proto.vehicle.Empty', null, global);
goog.exportSymbol('proto.vehicle.GetVehicleByIdRequest', null, global);
goog.exportSymbol('proto.vehicle.GetVehicleByVINRequest', null, global);
goog.exportSymbol('proto.vehicle.GetVehiclesByBrandRequest', null, global);
goog.exportSymbol('proto.vehicle.GetVehiclesByCriteriaRequest', null, global);
goog.exportSymbol('proto.vehicle.GetVehiclesByFuelTypeRequest', null, global);
goog.exportSymbol('proto.vehicle.GetVehiclesByGearboxRequest', null, global);
goog.exportSymbol('proto.vehicle.GetVehiclesByMaxMileageRequest', null, global);
goog.exportSymbol('proto.vehicle.GetVehiclesByUserIdRequest', null, global);
goog.exportSymbol('proto.vehicle.GetVehiclesByYearRequest', null, global);
goog.exportSymbol('proto.vehicle.VehicleReply', null, global);
goog.exportSymbol('proto.vehicle.VehiclesReply', null, global);
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.Empty = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.Empty, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.Empty.displayName = 'proto.vehicle.Empty';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.CreateVehicleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.CreateVehicleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.CreateVehicleRequest.displayName = 'proto.vehicle.CreateVehicleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.GetVehicleByIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.GetVehicleByIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.GetVehicleByIdRequest.displayName = 'proto.vehicle.GetVehicleByIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.GetVehicleByVINRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.GetVehicleByVINRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.GetVehicleByVINRequest.displayName = 'proto.vehicle.GetVehicleByVINRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.GetVehiclesByBrandRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.GetVehiclesByBrandRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.GetVehiclesByBrandRequest.displayName = 'proto.vehicle.GetVehiclesByBrandRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.GetVehiclesByFuelTypeRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.GetVehiclesByFuelTypeRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.GetVehiclesByFuelTypeRequest.displayName = 'proto.vehicle.GetVehiclesByFuelTypeRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.GetVehiclesByGearboxRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.GetVehiclesByGearboxRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.GetVehiclesByGearboxRequest.displayName = 'proto.vehicle.GetVehiclesByGearboxRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.GetVehiclesByYearRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.GetVehiclesByYearRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.GetVehiclesByYearRequest.displayName = 'proto.vehicle.GetVehiclesByYearRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.GetVehiclesByMaxMileageRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.GetVehiclesByMaxMileageRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.GetVehiclesByMaxMileageRequest.displayName = 'proto.vehicle.GetVehiclesByMaxMileageRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.GetVehiclesByCriteriaRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.GetVehiclesByCriteriaRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.GetVehiclesByCriteriaRequest.displayName = 'proto.vehicle.GetVehiclesByCriteriaRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.GetVehiclesByUserIdRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.GetVehiclesByUserIdRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.GetVehiclesByUserIdRequest.displayName = 'proto.vehicle.GetVehiclesByUserIdRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.DeleteVehicleRequest = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.DeleteVehicleRequest, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.DeleteVehicleRequest.displayName = 'proto.vehicle.DeleteVehicleRequest';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.VehicleReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.VehicleReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.VehicleReply.displayName = 'proto.vehicle.VehicleReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.VehiclesReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.vehicle.VehiclesReply.repeatedFields_, null);
};
goog.inherits(proto.vehicle.VehiclesReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.VehiclesReply.displayName = 'proto.vehicle.VehiclesReply';
}
/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.vehicle.DeleteReply = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.vehicle.DeleteReply, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  /**
   * @public
   * @override
   */
  proto.vehicle.DeleteReply.displayName = 'proto.vehicle.DeleteReply';
}



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.Empty.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.Empty.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.Empty} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.Empty.toObject = function(includeInstance, msg) {
  var f, obj = {

  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.Empty}
 */
proto.vehicle.Empty.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.Empty;
  return proto.vehicle.Empty.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.Empty} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.Empty}
 */
proto.vehicle.Empty.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.Empty.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.Empty.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.Empty} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.Empty.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.CreateVehicleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.CreateVehicleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.CreateVehicleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.CreateVehicleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
brand: jspb.Message.getFieldWithDefault(msg, 1, ""),
model: jspb.Message.getFieldWithDefault(msg, 2, ""),
vin: jspb.Message.getFieldWithDefault(msg, 3, ""),
fuelType: jspb.Message.getFieldWithDefault(msg, 4, ""),
gearbox: jspb.Message.getFieldWithDefault(msg, 5, ""),
year: jspb.Message.getFieldWithDefault(msg, 6, 0),
mileage: jspb.Message.getFieldWithDefault(msg, 7, 0),
userId: jspb.Message.getFieldWithDefault(msg, 8, ""),
priceAnnounced: jspb.Message.getFloatingPointFieldWithDefault(msg, 9, 0.0),
location: jspb.Message.getFieldWithDefault(msg, 10, ""),
state: jspb.Message.getFieldWithDefault(msg, 11, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.CreateVehicleRequest}
 */
proto.vehicle.CreateVehicleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.CreateVehicleRequest;
  return proto.vehicle.CreateVehicleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.CreateVehicleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.CreateVehicleRequest}
 */
proto.vehicle.CreateVehicleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setVin(value);
      break;
    case 4:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuelType(value);
      break;
    case 5:
      var value = /** @type {string} */ (reader.readString());
      msg.setGearbox(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMileage(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPriceAnnounced(value);
      break;
    case 10:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.CreateVehicleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.CreateVehicleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.CreateVehicleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.CreateVehicleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getVin();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getFuelType();
  if (f.length > 0) {
    writer.writeString(
      4,
      f
    );
  }
  f = message.getGearbox();
  if (f.length > 0) {
    writer.writeString(
      5,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      6,
      f
    );
  }
  f = message.getMileage();
  if (f !== 0) {
    writer.writeInt32(
      7,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getPriceAnnounced();
  if (f !== 0.0) {
    writer.writeDouble(
      9,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      10,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
};


/**
 * optional string brand = 1;
 * @return {string}
 */
proto.vehicle.CreateVehicleRequest.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string model = 2;
 * @return {string}
 */
proto.vehicle.CreateVehicleRequest.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string vin = 3;
 * @return {string}
 */
proto.vehicle.CreateVehicleRequest.prototype.getVin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setVin = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional string fuel_type = 4;
 * @return {string}
 */
proto.vehicle.CreateVehicleRequest.prototype.getFuelType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 4, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setFuelType = function(value) {
  return jspb.Message.setProto3StringField(this, 4, value);
};


/**
 * optional string gearbox = 5;
 * @return {string}
 */
proto.vehicle.CreateVehicleRequest.prototype.getGearbox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 5, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setGearbox = function(value) {
  return jspb.Message.setProto3StringField(this, 5, value);
};


/**
 * optional int32 year = 6;
 * @return {number}
 */
proto.vehicle.CreateVehicleRequest.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 6, 0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 6, value);
};


/**
 * optional int32 mileage = 7;
 * @return {number}
 */
proto.vehicle.CreateVehicleRequest.prototype.getMileage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 7, 0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setMileage = function(value) {
  return jspb.Message.setProto3IntField(this, 7, value);
};


/**
 * optional string user_id = 8;
 * @return {string}
 */
proto.vehicle.CreateVehicleRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional double price_announced = 9;
 * @return {number}
 */
proto.vehicle.CreateVehicleRequest.prototype.getPriceAnnounced = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 9, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setPriceAnnounced = function(value) {
  return jspb.Message.setProto3FloatField(this, 9, value);
};


/**
 * optional string location = 10;
 * @return {string}
 */
proto.vehicle.CreateVehicleRequest.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 10, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 10, value);
};


/**
 * optional string state = 11;
 * @return {string}
 */
proto.vehicle.CreateVehicleRequest.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.CreateVehicleRequest} returns this
 */
proto.vehicle.CreateVehicleRequest.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.GetVehicleByIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.GetVehicleByIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.GetVehicleByIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehicleByIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.GetVehicleByIdRequest}
 */
proto.vehicle.GetVehicleByIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.GetVehicleByIdRequest;
  return proto.vehicle.GetVehicleByIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.GetVehicleByIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.GetVehicleByIdRequest}
 */
proto.vehicle.GetVehicleByIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.GetVehicleByIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.GetVehicleByIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.GetVehicleByIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehicleByIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vehicle.GetVehicleByIdRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.GetVehicleByIdRequest} returns this
 */
proto.vehicle.GetVehicleByIdRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.GetVehicleByVINRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.GetVehicleByVINRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.GetVehicleByVINRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehicleByVINRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
vin: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.GetVehicleByVINRequest}
 */
proto.vehicle.GetVehicleByVINRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.GetVehicleByVINRequest;
  return proto.vehicle.GetVehicleByVINRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.GetVehicleByVINRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.GetVehicleByVINRequest}
 */
proto.vehicle.GetVehicleByVINRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setVin(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.GetVehicleByVINRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.GetVehicleByVINRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.GetVehicleByVINRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehicleByVINRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVin();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string vin = 1;
 * @return {string}
 */
proto.vehicle.GetVehicleByVINRequest.prototype.getVin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.GetVehicleByVINRequest} returns this
 */
proto.vehicle.GetVehicleByVINRequest.prototype.setVin = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.GetVehiclesByBrandRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.GetVehiclesByBrandRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.GetVehiclesByBrandRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByBrandRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
brand: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.GetVehiclesByBrandRequest}
 */
proto.vehicle.GetVehiclesByBrandRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.GetVehiclesByBrandRequest;
  return proto.vehicle.GetVehiclesByBrandRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.GetVehiclesByBrandRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.GetVehiclesByBrandRequest}
 */
proto.vehicle.GetVehiclesByBrandRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.GetVehiclesByBrandRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.GetVehiclesByBrandRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.GetVehiclesByBrandRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByBrandRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getBrand();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string brand = 1;
 * @return {string}
 */
proto.vehicle.GetVehiclesByBrandRequest.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.GetVehiclesByBrandRequest} returns this
 */
proto.vehicle.GetVehiclesByBrandRequest.prototype.setBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.GetVehiclesByFuelTypeRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.GetVehiclesByFuelTypeRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.GetVehiclesByFuelTypeRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByFuelTypeRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
fuelType: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.GetVehiclesByFuelTypeRequest}
 */
proto.vehicle.GetVehiclesByFuelTypeRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.GetVehiclesByFuelTypeRequest;
  return proto.vehicle.GetVehiclesByFuelTypeRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.GetVehiclesByFuelTypeRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.GetVehiclesByFuelTypeRequest}
 */
proto.vehicle.GetVehiclesByFuelTypeRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuelType(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.GetVehiclesByFuelTypeRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.GetVehiclesByFuelTypeRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.GetVehiclesByFuelTypeRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByFuelTypeRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFuelType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string fuel_type = 1;
 * @return {string}
 */
proto.vehicle.GetVehiclesByFuelTypeRequest.prototype.getFuelType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.GetVehiclesByFuelTypeRequest} returns this
 */
proto.vehicle.GetVehiclesByFuelTypeRequest.prototype.setFuelType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.GetVehiclesByGearboxRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.GetVehiclesByGearboxRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.GetVehiclesByGearboxRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByGearboxRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
gearbox: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.GetVehiclesByGearboxRequest}
 */
proto.vehicle.GetVehiclesByGearboxRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.GetVehiclesByGearboxRequest;
  return proto.vehicle.GetVehiclesByGearboxRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.GetVehiclesByGearboxRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.GetVehiclesByGearboxRequest}
 */
proto.vehicle.GetVehiclesByGearboxRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setGearbox(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.GetVehiclesByGearboxRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.GetVehiclesByGearboxRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.GetVehiclesByGearboxRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByGearboxRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getGearbox();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string gearbox = 1;
 * @return {string}
 */
proto.vehicle.GetVehiclesByGearboxRequest.prototype.getGearbox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.GetVehiclesByGearboxRequest} returns this
 */
proto.vehicle.GetVehiclesByGearboxRequest.prototype.setGearbox = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.GetVehiclesByYearRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.GetVehiclesByYearRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.GetVehiclesByYearRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByYearRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
year: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.GetVehiclesByYearRequest}
 */
proto.vehicle.GetVehiclesByYearRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.GetVehiclesByYearRequest;
  return proto.vehicle.GetVehiclesByYearRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.GetVehiclesByYearRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.GetVehiclesByYearRequest}
 */
proto.vehicle.GetVehiclesByYearRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.GetVehiclesByYearRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.GetVehiclesByYearRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.GetVehiclesByYearRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByYearRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 year = 1;
 * @return {number}
 */
proto.vehicle.GetVehiclesByYearRequest.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.GetVehiclesByYearRequest} returns this
 */
proto.vehicle.GetVehiclesByYearRequest.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.GetVehiclesByMaxMileageRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.GetVehiclesByMaxMileageRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.GetVehiclesByMaxMileageRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByMaxMileageRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
maxMileage: jspb.Message.getFieldWithDefault(msg, 1, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.GetVehiclesByMaxMileageRequest}
 */
proto.vehicle.GetVehiclesByMaxMileageRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.GetVehiclesByMaxMileageRequest;
  return proto.vehicle.GetVehiclesByMaxMileageRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.GetVehiclesByMaxMileageRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.GetVehiclesByMaxMileageRequest}
 */
proto.vehicle.GetVehiclesByMaxMileageRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxMileage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.GetVehiclesByMaxMileageRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.GetVehiclesByMaxMileageRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.GetVehiclesByMaxMileageRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByMaxMileageRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMaxMileage();
  if (f !== 0) {
    writer.writeInt32(
      1,
      f
    );
  }
};


/**
 * optional int32 max_mileage = 1;
 * @return {number}
 */
proto.vehicle.GetVehiclesByMaxMileageRequest.prototype.getMaxMileage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 1, 0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.GetVehiclesByMaxMileageRequest} returns this
 */
proto.vehicle.GetVehiclesByMaxMileageRequest.prototype.setMaxMileage = function(value) {
  return jspb.Message.setProto3IntField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.GetVehiclesByCriteriaRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.GetVehiclesByCriteriaRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.GetVehiclesByCriteriaRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByCriteriaRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
fuelType: jspb.Message.getFieldWithDefault(msg, 1, ""),
gearbox: jspb.Message.getFieldWithDefault(msg, 2, ""),
maxMileage: jspb.Message.getFieldWithDefault(msg, 3, 0)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.GetVehiclesByCriteriaRequest}
 */
proto.vehicle.GetVehiclesByCriteriaRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.GetVehiclesByCriteriaRequest;
  return proto.vehicle.GetVehiclesByCriteriaRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.GetVehiclesByCriteriaRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.GetVehiclesByCriteriaRequest}
 */
proto.vehicle.GetVehiclesByCriteriaRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuelType(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setGearbox(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMaxMileage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.GetVehiclesByCriteriaRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.GetVehiclesByCriteriaRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.GetVehiclesByCriteriaRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByCriteriaRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFuelType();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getGearbox();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getMaxMileage();
  if (f !== 0) {
    writer.writeInt32(
      3,
      f
    );
  }
};


/**
 * optional string fuel_type = 1;
 * @return {string}
 */
proto.vehicle.GetVehiclesByCriteriaRequest.prototype.getFuelType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.GetVehiclesByCriteriaRequest} returns this
 */
proto.vehicle.GetVehiclesByCriteriaRequest.prototype.setFuelType = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string gearbox = 2;
 * @return {string}
 */
proto.vehicle.GetVehiclesByCriteriaRequest.prototype.getGearbox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.GetVehiclesByCriteriaRequest} returns this
 */
proto.vehicle.GetVehiclesByCriteriaRequest.prototype.setGearbox = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional int32 max_mileage = 3;
 * @return {number}
 */
proto.vehicle.GetVehiclesByCriteriaRequest.prototype.getMaxMileage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 3, 0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.GetVehiclesByCriteriaRequest} returns this
 */
proto.vehicle.GetVehiclesByCriteriaRequest.prototype.setMaxMileage = function(value) {
  return jspb.Message.setProto3IntField(this, 3, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.GetVehiclesByUserIdRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.GetVehiclesByUserIdRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.GetVehiclesByUserIdRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByUserIdRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
userId: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.GetVehiclesByUserIdRequest}
 */
proto.vehicle.GetVehiclesByUserIdRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.GetVehiclesByUserIdRequest;
  return proto.vehicle.GetVehiclesByUserIdRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.GetVehiclesByUserIdRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.GetVehiclesByUserIdRequest}
 */
proto.vehicle.GetVehiclesByUserIdRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.GetVehiclesByUserIdRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.GetVehiclesByUserIdRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.GetVehiclesByUserIdRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.GetVehiclesByUserIdRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string user_id = 1;
 * @return {string}
 */
proto.vehicle.GetVehiclesByUserIdRequest.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.GetVehiclesByUserIdRequest} returns this
 */
proto.vehicle.GetVehiclesByUserIdRequest.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.DeleteVehicleRequest.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.DeleteVehicleRequest.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.DeleteVehicleRequest} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.DeleteVehicleRequest.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.DeleteVehicleRequest}
 */
proto.vehicle.DeleteVehicleRequest.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.DeleteVehicleRequest;
  return proto.vehicle.DeleteVehicleRequest.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.DeleteVehicleRequest} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.DeleteVehicleRequest}
 */
proto.vehicle.DeleteVehicleRequest.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.DeleteVehicleRequest.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.DeleteVehicleRequest.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.DeleteVehicleRequest} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.DeleteVehicleRequest.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vehicle.DeleteVehicleRequest.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.DeleteVehicleRequest} returns this
 */
proto.vehicle.DeleteVehicleRequest.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.VehicleReply.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.VehicleReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.VehicleReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.VehicleReply.toObject = function(includeInstance, msg) {
  var f, obj = {
id: jspb.Message.getFieldWithDefault(msg, 1, ""),
brand: jspb.Message.getFieldWithDefault(msg, 2, ""),
model: jspb.Message.getFieldWithDefault(msg, 3, ""),
year: jspb.Message.getFieldWithDefault(msg, 4, 0),
kilometers: jspb.Message.getFieldWithDefault(msg, 5, 0),
fuelType: jspb.Message.getFieldWithDefault(msg, 6, ""),
priceAnnounced: jspb.Message.getFloatingPointFieldWithDefault(msg, 7, 0.0),
location: jspb.Message.getFieldWithDefault(msg, 8, ""),
vin: jspb.Message.getFieldWithDefault(msg, 9, ""),
mileage: jspb.Message.getFieldWithDefault(msg, 10, 0),
gearbox: jspb.Message.getFieldWithDefault(msg, 11, ""),
userId: jspb.Message.getFieldWithDefault(msg, 12, ""),
state: jspb.Message.getFieldWithDefault(msg, 13, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.VehicleReply}
 */
proto.vehicle.VehicleReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.VehicleReply;
  return proto.vehicle.VehicleReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.VehicleReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.VehicleReply}
 */
proto.vehicle.VehicleReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setId(value);
      break;
    case 2:
      var value = /** @type {string} */ (reader.readString());
      msg.setBrand(value);
      break;
    case 3:
      var value = /** @type {string} */ (reader.readString());
      msg.setModel(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setYear(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setKilometers(value);
      break;
    case 6:
      var value = /** @type {string} */ (reader.readString());
      msg.setFuelType(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setPriceAnnounced(value);
      break;
    case 8:
      var value = /** @type {string} */ (reader.readString());
      msg.setLocation(value);
      break;
    case 9:
      var value = /** @type {string} */ (reader.readString());
      msg.setVin(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setMileage(value);
      break;
    case 11:
      var value = /** @type {string} */ (reader.readString());
      msg.setGearbox(value);
      break;
    case 12:
      var value = /** @type {string} */ (reader.readString());
      msg.setUserId(value);
      break;
    case 13:
      var value = /** @type {string} */ (reader.readString());
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.VehicleReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.VehicleReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.VehicleReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.VehicleReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getId();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
  f = message.getBrand();
  if (f.length > 0) {
    writer.writeString(
      2,
      f
    );
  }
  f = message.getModel();
  if (f.length > 0) {
    writer.writeString(
      3,
      f
    );
  }
  f = message.getYear();
  if (f !== 0) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = message.getKilometers();
  if (f !== 0) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = message.getFuelType();
  if (f.length > 0) {
    writer.writeString(
      6,
      f
    );
  }
  f = message.getPriceAnnounced();
  if (f !== 0.0) {
    writer.writeDouble(
      7,
      f
    );
  }
  f = message.getLocation();
  if (f.length > 0) {
    writer.writeString(
      8,
      f
    );
  }
  f = message.getVin();
  if (f.length > 0) {
    writer.writeString(
      9,
      f
    );
  }
  f = message.getMileage();
  if (f !== 0) {
    writer.writeInt32(
      10,
      f
    );
  }
  f = message.getGearbox();
  if (f.length > 0) {
    writer.writeString(
      11,
      f
    );
  }
  f = message.getUserId();
  if (f.length > 0) {
    writer.writeString(
      12,
      f
    );
  }
  f = message.getState();
  if (f.length > 0) {
    writer.writeString(
      13,
      f
    );
  }
};


/**
 * optional string id = 1;
 * @return {string}
 */
proto.vehicle.VehicleReply.prototype.getId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setId = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


/**
 * optional string brand = 2;
 * @return {string}
 */
proto.vehicle.VehicleReply.prototype.getBrand = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 2, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setBrand = function(value) {
  return jspb.Message.setProto3StringField(this, 2, value);
};


/**
 * optional string model = 3;
 * @return {string}
 */
proto.vehicle.VehicleReply.prototype.getModel = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 3, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setModel = function(value) {
  return jspb.Message.setProto3StringField(this, 3, value);
};


/**
 * optional int32 year = 4;
 * @return {number}
 */
proto.vehicle.VehicleReply.prototype.getYear = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 4, 0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setYear = function(value) {
  return jspb.Message.setProto3IntField(this, 4, value);
};


/**
 * optional int32 kilometers = 5;
 * @return {number}
 */
proto.vehicle.VehicleReply.prototype.getKilometers = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 5, 0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setKilometers = function(value) {
  return jspb.Message.setProto3IntField(this, 5, value);
};


/**
 * optional string fuel_type = 6;
 * @return {string}
 */
proto.vehicle.VehicleReply.prototype.getFuelType = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 6, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setFuelType = function(value) {
  return jspb.Message.setProto3StringField(this, 6, value);
};


/**
 * optional double price_announced = 7;
 * @return {number}
 */
proto.vehicle.VehicleReply.prototype.getPriceAnnounced = function() {
  return /** @type {number} */ (jspb.Message.getFloatingPointFieldWithDefault(this, 7, 0.0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setPriceAnnounced = function(value) {
  return jspb.Message.setProto3FloatField(this, 7, value);
};


/**
 * optional string location = 8;
 * @return {string}
 */
proto.vehicle.VehicleReply.prototype.getLocation = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 8, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setLocation = function(value) {
  return jspb.Message.setProto3StringField(this, 8, value);
};


/**
 * optional string vin = 9;
 * @return {string}
 */
proto.vehicle.VehicleReply.prototype.getVin = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 9, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setVin = function(value) {
  return jspb.Message.setProto3StringField(this, 9, value);
};


/**
 * optional int32 mileage = 10;
 * @return {number}
 */
proto.vehicle.VehicleReply.prototype.getMileage = function() {
  return /** @type {number} */ (jspb.Message.getFieldWithDefault(this, 10, 0));
};


/**
 * @param {number} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setMileage = function(value) {
  return jspb.Message.setProto3IntField(this, 10, value);
};


/**
 * optional string gearbox = 11;
 * @return {string}
 */
proto.vehicle.VehicleReply.prototype.getGearbox = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 11, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setGearbox = function(value) {
  return jspb.Message.setProto3StringField(this, 11, value);
};


/**
 * optional string user_id = 12;
 * @return {string}
 */
proto.vehicle.VehicleReply.prototype.getUserId = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 12, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setUserId = function(value) {
  return jspb.Message.setProto3StringField(this, 12, value);
};


/**
 * optional string state = 13;
 * @return {string}
 */
proto.vehicle.VehicleReply.prototype.getState = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 13, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.VehicleReply} returns this
 */
proto.vehicle.VehicleReply.prototype.setState = function(value) {
  return jspb.Message.setProto3StringField(this, 13, value);
};



/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.vehicle.VehiclesReply.repeatedFields_ = [1];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.VehiclesReply.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.VehiclesReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.VehiclesReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.VehiclesReply.toObject = function(includeInstance, msg) {
  var f, obj = {
vehiclesList: jspb.Message.toObjectList(msg.getVehiclesList(),
    proto.vehicle.VehicleReply.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.VehiclesReply}
 */
proto.vehicle.VehiclesReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.VehiclesReply;
  return proto.vehicle.VehiclesReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.VehiclesReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.VehiclesReply}
 */
proto.vehicle.VehiclesReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.vehicle.VehicleReply;
      reader.readMessage(value,proto.vehicle.VehicleReply.deserializeBinaryFromReader);
      msg.addVehicles(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.VehiclesReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.VehiclesReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.VehiclesReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.VehiclesReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getVehiclesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      1,
      f,
      proto.vehicle.VehicleReply.serializeBinaryToWriter
    );
  }
};


/**
 * repeated VehicleReply vehicles = 1;
 * @return {!Array<!proto.vehicle.VehicleReply>}
 */
proto.vehicle.VehiclesReply.prototype.getVehiclesList = function() {
  return /** @type{!Array<!proto.vehicle.VehicleReply>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.vehicle.VehicleReply, 1));
};


/**
 * @param {!Array<!proto.vehicle.VehicleReply>} value
 * @return {!proto.vehicle.VehiclesReply} returns this
*/
proto.vehicle.VehiclesReply.prototype.setVehiclesList = function(value) {
  return jspb.Message.setRepeatedWrapperField(this, 1, value);
};


/**
 * @param {!proto.vehicle.VehicleReply=} opt_value
 * @param {number=} opt_index
 * @return {!proto.vehicle.VehicleReply}
 */
proto.vehicle.VehiclesReply.prototype.addVehicles = function(opt_value, opt_index) {
  return jspb.Message.addToRepeatedWrapperField(this, 1, opt_value, proto.vehicle.VehicleReply, opt_index);
};


/**
 * Clears the list making it empty but non-null.
 * @return {!proto.vehicle.VehiclesReply} returns this
 */
proto.vehicle.VehiclesReply.prototype.clearVehiclesList = function() {
  return this.setVehiclesList([]);
};





if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * Optional fields that are not set will be set to undefined.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     net/proto2/compiler/js/internal/generator.cc#kKeyword.
 * @param {boolean=} opt_includeInstance Deprecated. whether to include the
 *     JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @return {!Object}
 */
proto.vehicle.DeleteReply.prototype.toObject = function(opt_includeInstance) {
  return proto.vehicle.DeleteReply.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Deprecated. Whether to include
 *     the JSPB instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.vehicle.DeleteReply} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.DeleteReply.toObject = function(includeInstance, msg) {
  var f, obj = {
message: jspb.Message.getFieldWithDefault(msg, 1, "")
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.vehicle.DeleteReply}
 */
proto.vehicle.DeleteReply.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.vehicle.DeleteReply;
  return proto.vehicle.DeleteReply.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.vehicle.DeleteReply} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.vehicle.DeleteReply}
 */
proto.vehicle.DeleteReply.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setMessage(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.vehicle.DeleteReply.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.vehicle.DeleteReply.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.vehicle.DeleteReply} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.vehicle.DeleteReply.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getMessage();
  if (f.length > 0) {
    writer.writeString(
      1,
      f
    );
  }
};


/**
 * optional string message = 1;
 * @return {string}
 */
proto.vehicle.DeleteReply.prototype.getMessage = function() {
  return /** @type {string} */ (jspb.Message.getFieldWithDefault(this, 1, ""));
};


/**
 * @param {string} value
 * @return {!proto.vehicle.DeleteReply} returns this
 */
proto.vehicle.DeleteReply.prototype.setMessage = function(value) {
  return jspb.Message.setProto3StringField(this, 1, value);
};


goog.object.extend(exports, proto.vehicle);
