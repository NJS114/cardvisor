/**
 * @fileoverview gRPC-Web generated client stub for expert
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.31.0
// source: expert.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as expert_pb from './expert_pb'; // proto import: "expert.proto"


export class ExpertServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateExpert = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/CreateExpert',
    grpcWeb.MethodType.UNARY,
    expert_pb.CreateExpertRequest,
    expert_pb.ExpertReply,
    (request: expert_pb.CreateExpertRequest) => {
      return request.serializeBinary();
    },
    expert_pb.ExpertReply.deserializeBinary
  );

  createExpert(
    request: expert_pb.CreateExpertRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ExpertReply>;

  createExpert(
    request: expert_pb.CreateExpertRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertReply) => void): grpcWeb.ClientReadableStream<expert_pb.ExpertReply>;

  createExpert(
    request: expert_pb.CreateExpertRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/CreateExpert',
        request,
        metadata || {},
        this.methodDescriptorCreateExpert,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/CreateExpert',
    request,
    metadata || {},
    this.methodDescriptorCreateExpert);
  }

  methodDescriptorGetExpertById = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/GetExpertById',
    grpcWeb.MethodType.UNARY,
    expert_pb.GetExpertByIdRequest,
    expert_pb.ExpertReply,
    (request: expert_pb.GetExpertByIdRequest) => {
      return request.serializeBinary();
    },
    expert_pb.ExpertReply.deserializeBinary
  );

  getExpertById(
    request: expert_pb.GetExpertByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ExpertReply>;

  getExpertById(
    request: expert_pb.GetExpertByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertReply) => void): grpcWeb.ClientReadableStream<expert_pb.ExpertReply>;

  getExpertById(
    request: expert_pb.GetExpertByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/GetExpertById',
        request,
        metadata || {},
        this.methodDescriptorGetExpertById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/GetExpertById',
    request,
    metadata || {},
    this.methodDescriptorGetExpertById);
  }

  methodDescriptorGetAllExperts = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/GetAllExperts',
    grpcWeb.MethodType.UNARY,
    expert_pb.Empty,
    expert_pb.ExpertsReply,
    (request: expert_pb.Empty) => {
      return request.serializeBinary();
    },
    expert_pb.ExpertsReply.deserializeBinary
  );

  getAllExperts(
    request: expert_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ExpertsReply>;

  getAllExperts(
    request: expert_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void): grpcWeb.ClientReadableStream<expert_pb.ExpertsReply>;

  getAllExperts(
    request: expert_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/GetAllExperts',
        request,
        metadata || {},
        this.methodDescriptorGetAllExperts,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/GetAllExperts',
    request,
    metadata || {},
    this.methodDescriptorGetAllExperts);
  }

  methodDescriptorGetExpertsByAvailability = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/GetExpertsByAvailability',
    grpcWeb.MethodType.UNARY,
    expert_pb.GetExpertsByAvailabilityRequest,
    expert_pb.ExpertsReply,
    (request: expert_pb.GetExpertsByAvailabilityRequest) => {
      return request.serializeBinary();
    },
    expert_pb.ExpertsReply.deserializeBinary
  );

  getExpertsByAvailability(
    request: expert_pb.GetExpertsByAvailabilityRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ExpertsReply>;

  getExpertsByAvailability(
    request: expert_pb.GetExpertsByAvailabilityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void): grpcWeb.ClientReadableStream<expert_pb.ExpertsReply>;

  getExpertsByAvailability(
    request: expert_pb.GetExpertsByAvailabilityRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/GetExpertsByAvailability',
        request,
        metadata || {},
        this.methodDescriptorGetExpertsByAvailability,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/GetExpertsByAvailability',
    request,
    metadata || {},
    this.methodDescriptorGetExpertsByAvailability);
  }

  methodDescriptorGetExpertsBySpeciality = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/GetExpertsBySpeciality',
    grpcWeb.MethodType.UNARY,
    expert_pb.GetExpertsBySpecialityRequest,
    expert_pb.ExpertsReply,
    (request: expert_pb.GetExpertsBySpecialityRequest) => {
      return request.serializeBinary();
    },
    expert_pb.ExpertsReply.deserializeBinary
  );

  getExpertsBySpeciality(
    request: expert_pb.GetExpertsBySpecialityRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ExpertsReply>;

  getExpertsBySpeciality(
    request: expert_pb.GetExpertsBySpecialityRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void): grpcWeb.ClientReadableStream<expert_pb.ExpertsReply>;

  getExpertsBySpeciality(
    request: expert_pb.GetExpertsBySpecialityRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/GetExpertsBySpeciality',
        request,
        metadata || {},
        this.methodDescriptorGetExpertsBySpeciality,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/GetExpertsBySpeciality',
    request,
    metadata || {},
    this.methodDescriptorGetExpertsBySpeciality);
  }

  methodDescriptorGetExpertServicePrice = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/GetExpertServicePrice',
    grpcWeb.MethodType.UNARY,
    expert_pb.GetExpertByIdRequest,
    expert_pb.ServicePriceReply,
    (request: expert_pb.GetExpertByIdRequest) => {
      return request.serializeBinary();
    },
    expert_pb.ServicePriceReply.deserializeBinary
  );

  getExpertServicePrice(
    request: expert_pb.GetExpertByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ServicePriceReply>;

  getExpertServicePrice(
    request: expert_pb.GetExpertByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ServicePriceReply) => void): grpcWeb.ClientReadableStream<expert_pb.ServicePriceReply>;

  getExpertServicePrice(
    request: expert_pb.GetExpertByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ServicePriceReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/GetExpertServicePrice',
        request,
        metadata || {},
        this.methodDescriptorGetExpertServicePrice,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/GetExpertServicePrice',
    request,
    metadata || {},
    this.methodDescriptorGetExpertServicePrice);
  }

  methodDescriptorDeleteExpert = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/DeleteExpert',
    grpcWeb.MethodType.UNARY,
    expert_pb.DeleteExpertRequest,
    expert_pb.DeleteReply,
    (request: expert_pb.DeleteExpertRequest) => {
      return request.serializeBinary();
    },
    expert_pb.DeleteReply.deserializeBinary
  );

  deleteExpert(
    request: expert_pb.DeleteExpertRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.DeleteReply>;

  deleteExpert(
    request: expert_pb.DeleteExpertRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.DeleteReply) => void): grpcWeb.ClientReadableStream<expert_pb.DeleteReply>;

  deleteExpert(
    request: expert_pb.DeleteExpertRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.DeleteReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/DeleteExpert',
        request,
        metadata || {},
        this.methodDescriptorDeleteExpert,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/DeleteExpert',
    request,
    metadata || {},
    this.methodDescriptorDeleteExpert);
  }

  methodDescriptorGetExpertsByYearsOfExperience = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/GetExpertsByYearsOfExperience',
    grpcWeb.MethodType.UNARY,
    expert_pb.GetExpertsByYearsOfExperienceRequest,
    expert_pb.ExpertsReply,
    (request: expert_pb.GetExpertsByYearsOfExperienceRequest) => {
      return request.serializeBinary();
    },
    expert_pb.ExpertsReply.deserializeBinary
  );

  getExpertsByYearsOfExperience(
    request: expert_pb.GetExpertsByYearsOfExperienceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ExpertsReply>;

  getExpertsByYearsOfExperience(
    request: expert_pb.GetExpertsByYearsOfExperienceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void): grpcWeb.ClientReadableStream<expert_pb.ExpertsReply>;

  getExpertsByYearsOfExperience(
    request: expert_pb.GetExpertsByYearsOfExperienceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/GetExpertsByYearsOfExperience',
        request,
        metadata || {},
        this.methodDescriptorGetExpertsByYearsOfExperience,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/GetExpertsByYearsOfExperience',
    request,
    metadata || {},
    this.methodDescriptorGetExpertsByYearsOfExperience);
  }

  methodDescriptorGetExpertsByRating = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/GetExpertsByRating',
    grpcWeb.MethodType.UNARY,
    expert_pb.GetExpertsByRatingRequest,
    expert_pb.ExpertsReply,
    (request: expert_pb.GetExpertsByRatingRequest) => {
      return request.serializeBinary();
    },
    expert_pb.ExpertsReply.deserializeBinary
  );

  getExpertsByRating(
    request: expert_pb.GetExpertsByRatingRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ExpertsReply>;

  getExpertsByRating(
    request: expert_pb.GetExpertsByRatingRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void): grpcWeb.ClientReadableStream<expert_pb.ExpertsReply>;

  getExpertsByRating(
    request: expert_pb.GetExpertsByRatingRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/GetExpertsByRating',
        request,
        metadata || {},
        this.methodDescriptorGetExpertsByRating,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/GetExpertsByRating',
    request,
    metadata || {},
    this.methodDescriptorGetExpertsByRating);
  }

  methodDescriptorGetExpertByUserId = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/GetExpertByUserId',
    grpcWeb.MethodType.UNARY,
    expert_pb.GetExpertByIdRequest,
    expert_pb.ExpertReply,
    (request: expert_pb.GetExpertByIdRequest) => {
      return request.serializeBinary();
    },
    expert_pb.ExpertReply.deserializeBinary
  );

  getExpertByUserId(
    request: expert_pb.GetExpertByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ExpertReply>;

  getExpertByUserId(
    request: expert_pb.GetExpertByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertReply) => void): grpcWeb.ClientReadableStream<expert_pb.ExpertReply>;

  getExpertByUserId(
    request: expert_pb.GetExpertByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/GetExpertByUserId',
        request,
        metadata || {},
        this.methodDescriptorGetExpertByUserId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/GetExpertByUserId',
    request,
    metadata || {},
    this.methodDescriptorGetExpertByUserId);
  }

  methodDescriptorUpdateExpertPrice = new grpcWeb.MethodDescriptor(
    '/expert.ExpertService/UpdateExpertPrice',
    grpcWeb.MethodType.UNARY,
    expert_pb.UpdateExpertPriceRequest,
    expert_pb.ExpertReply,
    (request: expert_pb.UpdateExpertPriceRequest) => {
      return request.serializeBinary();
    },
    expert_pb.ExpertReply.deserializeBinary
  );

  updateExpertPrice(
    request: expert_pb.UpdateExpertPriceRequest,
    metadata?: grpcWeb.Metadata | null): Promise<expert_pb.ExpertReply>;

  updateExpertPrice(
    request: expert_pb.UpdateExpertPriceRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertReply) => void): grpcWeb.ClientReadableStream<expert_pb.ExpertReply>;

  updateExpertPrice(
    request: expert_pb.UpdateExpertPriceRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: expert_pb.ExpertReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/expert.ExpertService/UpdateExpertPrice',
        request,
        metadata || {},
        this.methodDescriptorUpdateExpertPrice,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/expert.ExpertService/UpdateExpertPrice',
    request,
    metadata || {},
    this.methodDescriptorUpdateExpertPrice);
  }

}

export class CertificationServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

}

