/**
 * @fileoverview gRPC-Web generated client stub for vehicle
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.31.0
// source: vehicle.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as vehicle_pb from './vehicle_pb'; // proto import: "vehicle.proto"


export class VehicleServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateVehicle = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/CreateVehicle',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.CreateVehicleRequest,
    vehicle_pb.VehicleReply,
    (request: vehicle_pb.CreateVehicleRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehicleReply.deserializeBinary
  );

  createVehicle(
    request: vehicle_pb.CreateVehicleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehicleReply>;

  createVehicle(
    request: vehicle_pb.CreateVehicleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehicleReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehicleReply>;

  createVehicle(
    request: vehicle_pb.CreateVehicleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehicleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/CreateVehicle',
        request,
        metadata || {},
        this.methodDescriptorCreateVehicle,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/CreateVehicle',
    request,
    metadata || {},
    this.methodDescriptorCreateVehicle);
  }

  methodDescriptorGetVehicleById = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetVehicleById',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.GetVehicleByIdRequest,
    vehicle_pb.VehicleReply,
    (request: vehicle_pb.GetVehicleByIdRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehicleReply.deserializeBinary
  );

  getVehicleById(
    request: vehicle_pb.GetVehicleByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehicleReply>;

  getVehicleById(
    request: vehicle_pb.GetVehicleByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehicleReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehicleReply>;

  getVehicleById(
    request: vehicle_pb.GetVehicleByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehicleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetVehicleById',
        request,
        metadata || {},
        this.methodDescriptorGetVehicleById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetVehicleById',
    request,
    metadata || {},
    this.methodDescriptorGetVehicleById);
  }

  methodDescriptorGetVehicleByVIN = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetVehicleByVIN',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.GetVehicleByVINRequest,
    vehicle_pb.VehicleReply,
    (request: vehicle_pb.GetVehicleByVINRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehicleReply.deserializeBinary
  );

  getVehicleByVIN(
    request: vehicle_pb.GetVehicleByVINRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehicleReply>;

  getVehicleByVIN(
    request: vehicle_pb.GetVehicleByVINRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehicleReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehicleReply>;

  getVehicleByVIN(
    request: vehicle_pb.GetVehicleByVINRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehicleReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetVehicleByVIN',
        request,
        metadata || {},
        this.methodDescriptorGetVehicleByVIN,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetVehicleByVIN',
    request,
    metadata || {},
    this.methodDescriptorGetVehicleByVIN);
  }

  methodDescriptorGetVehiclesByBrand = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetVehiclesByBrand',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.GetVehiclesByBrandRequest,
    vehicle_pb.VehiclesReply,
    (request: vehicle_pb.GetVehiclesByBrandRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehiclesReply.deserializeBinary
  );

  getVehiclesByBrand(
    request: vehicle_pb.GetVehiclesByBrandRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehiclesReply>;

  getVehiclesByBrand(
    request: vehicle_pb.GetVehiclesByBrandRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehiclesReply>;

  getVehiclesByBrand(
    request: vehicle_pb.GetVehiclesByBrandRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetVehiclesByBrand',
        request,
        metadata || {},
        this.methodDescriptorGetVehiclesByBrand,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetVehiclesByBrand',
    request,
    metadata || {},
    this.methodDescriptorGetVehiclesByBrand);
  }

  methodDescriptorGetVehiclesByFuelType = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetVehiclesByFuelType',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.GetVehiclesByFuelTypeRequest,
    vehicle_pb.VehiclesReply,
    (request: vehicle_pb.GetVehiclesByFuelTypeRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehiclesReply.deserializeBinary
  );

  getVehiclesByFuelType(
    request: vehicle_pb.GetVehiclesByFuelTypeRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehiclesReply>;

  getVehiclesByFuelType(
    request: vehicle_pb.GetVehiclesByFuelTypeRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehiclesReply>;

  getVehiclesByFuelType(
    request: vehicle_pb.GetVehiclesByFuelTypeRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetVehiclesByFuelType',
        request,
        metadata || {},
        this.methodDescriptorGetVehiclesByFuelType,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetVehiclesByFuelType',
    request,
    metadata || {},
    this.methodDescriptorGetVehiclesByFuelType);
  }

  methodDescriptorGetVehiclesByGearbox = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetVehiclesByGearbox',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.GetVehiclesByGearboxRequest,
    vehicle_pb.VehiclesReply,
    (request: vehicle_pb.GetVehiclesByGearboxRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehiclesReply.deserializeBinary
  );

  getVehiclesByGearbox(
    request: vehicle_pb.GetVehiclesByGearboxRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehiclesReply>;

  getVehiclesByGearbox(
    request: vehicle_pb.GetVehiclesByGearboxRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehiclesReply>;

  getVehiclesByGearbox(
    request: vehicle_pb.GetVehiclesByGearboxRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetVehiclesByGearbox',
        request,
        metadata || {},
        this.methodDescriptorGetVehiclesByGearbox,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetVehiclesByGearbox',
    request,
    metadata || {},
    this.methodDescriptorGetVehiclesByGearbox);
  }

  methodDescriptorGetVehiclesByYear = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetVehiclesByYear',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.GetVehiclesByYearRequest,
    vehicle_pb.VehiclesReply,
    (request: vehicle_pb.GetVehiclesByYearRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehiclesReply.deserializeBinary
  );

  getVehiclesByYear(
    request: vehicle_pb.GetVehiclesByYearRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehiclesReply>;

  getVehiclesByYear(
    request: vehicle_pb.GetVehiclesByYearRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehiclesReply>;

  getVehiclesByYear(
    request: vehicle_pb.GetVehiclesByYearRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetVehiclesByYear',
        request,
        metadata || {},
        this.methodDescriptorGetVehiclesByYear,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetVehiclesByYear',
    request,
    metadata || {},
    this.methodDescriptorGetVehiclesByYear);
  }

  methodDescriptorGetVehiclesByMaxMileage = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetVehiclesByMaxMileage',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.GetVehiclesByMaxMileageRequest,
    vehicle_pb.VehiclesReply,
    (request: vehicle_pb.GetVehiclesByMaxMileageRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehiclesReply.deserializeBinary
  );

  getVehiclesByMaxMileage(
    request: vehicle_pb.GetVehiclesByMaxMileageRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehiclesReply>;

  getVehiclesByMaxMileage(
    request: vehicle_pb.GetVehiclesByMaxMileageRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehiclesReply>;

  getVehiclesByMaxMileage(
    request: vehicle_pb.GetVehiclesByMaxMileageRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetVehiclesByMaxMileage',
        request,
        metadata || {},
        this.methodDescriptorGetVehiclesByMaxMileage,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetVehiclesByMaxMileage',
    request,
    metadata || {},
    this.methodDescriptorGetVehiclesByMaxMileage);
  }

  methodDescriptorGetVehiclesByCriteria = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetVehiclesByCriteria',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.GetVehiclesByCriteriaRequest,
    vehicle_pb.VehiclesReply,
    (request: vehicle_pb.GetVehiclesByCriteriaRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehiclesReply.deserializeBinary
  );

  getVehiclesByCriteria(
    request: vehicle_pb.GetVehiclesByCriteriaRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehiclesReply>;

  getVehiclesByCriteria(
    request: vehicle_pb.GetVehiclesByCriteriaRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehiclesReply>;

  getVehiclesByCriteria(
    request: vehicle_pb.GetVehiclesByCriteriaRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetVehiclesByCriteria',
        request,
        metadata || {},
        this.methodDescriptorGetVehiclesByCriteria,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetVehiclesByCriteria',
    request,
    metadata || {},
    this.methodDescriptorGetVehiclesByCriteria);
  }

  methodDescriptorGetAllVehicles = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetAllVehicles',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.Empty,
    vehicle_pb.VehiclesReply,
    (request: vehicle_pb.Empty) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehiclesReply.deserializeBinary
  );

  getAllVehicles(
    request: vehicle_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehiclesReply>;

  getAllVehicles(
    request: vehicle_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehiclesReply>;

  getAllVehicles(
    request: vehicle_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetAllVehicles',
        request,
        metadata || {},
        this.methodDescriptorGetAllVehicles,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetAllVehicles',
    request,
    metadata || {},
    this.methodDescriptorGetAllVehicles);
  }

  methodDescriptorDeleteVehicle = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/DeleteVehicle',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.DeleteVehicleRequest,
    vehicle_pb.DeleteReply,
    (request: vehicle_pb.DeleteVehicleRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.DeleteReply.deserializeBinary
  );

  deleteVehicle(
    request: vehicle_pb.DeleteVehicleRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.DeleteReply>;

  deleteVehicle(
    request: vehicle_pb.DeleteVehicleRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.DeleteReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.DeleteReply>;

  deleteVehicle(
    request: vehicle_pb.DeleteVehicleRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.DeleteReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/DeleteVehicle',
        request,
        metadata || {},
        this.methodDescriptorDeleteVehicle,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/DeleteVehicle',
    request,
    metadata || {},
    this.methodDescriptorDeleteVehicle);
  }

  methodDescriptorGetVehiclesByUserId = new grpcWeb.MethodDescriptor(
    '/vehicle.VehicleService/GetVehiclesByUserId',
    grpcWeb.MethodType.UNARY,
    vehicle_pb.GetVehiclesByUserIdRequest,
    vehicle_pb.VehiclesReply,
    (request: vehicle_pb.GetVehiclesByUserIdRequest) => {
      return request.serializeBinary();
    },
    vehicle_pb.VehiclesReply.deserializeBinary
  );

  getVehiclesByUserId(
    request: vehicle_pb.GetVehiclesByUserIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<vehicle_pb.VehiclesReply>;

  getVehiclesByUserId(
    request: vehicle_pb.GetVehiclesByUserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void): grpcWeb.ClientReadableStream<vehicle_pb.VehiclesReply>;

  getVehiclesByUserId(
    request: vehicle_pb.GetVehiclesByUserIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: vehicle_pb.VehiclesReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/vehicle.VehicleService/GetVehiclesByUserId',
        request,
        metadata || {},
        this.methodDescriptorGetVehiclesByUserId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/vehicle.VehicleService/GetVehiclesByUserId',
    request,
    metadata || {},
    this.methodDescriptorGetVehiclesByUserId);
  }

}

