/**
 * @fileoverview gRPC-Web generated client stub for appointment
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v6.31.0
// source: appointment.proto


/* eslint-disable */
// @ts-nocheck


import * as grpcWeb from 'grpc-web';

import * as appointment_pb from './appointment_pb'; // proto import: "appointment.proto"


export class AppointmentServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string; };
  options_: null | { [index: string]: any; };

  constructor (hostname: string,
               credentials?: null | { [index: string]: string; },
               options?: null | { [index: string]: any; }) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options['format'] = 'text';

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, '');
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorCreateAppointment = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/CreateAppointment',
    grpcWeb.MethodType.UNARY,
    appointment_pb.CreateAppointmentRequest,
    appointment_pb.AppointmentReply,
    (request: appointment_pb.CreateAppointmentRequest) => {
      return request.serializeBinary();
    },
    appointment_pb.AppointmentReply.deserializeBinary
  );

  createAppointment(
    request: appointment_pb.CreateAppointmentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<appointment_pb.AppointmentReply>;

  createAppointment(
    request: appointment_pb.CreateAppointmentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentReply) => void): grpcWeb.ClientReadableStream<appointment_pb.AppointmentReply>;

  createAppointment(
    request: appointment_pb.CreateAppointmentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/CreateAppointment',
        request,
        metadata || {},
        this.methodDescriptorCreateAppointment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/CreateAppointment',
    request,
    metadata || {},
    this.methodDescriptorCreateAppointment);
  }

  methodDescriptorGetAppointmentById = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/GetAppointmentById',
    grpcWeb.MethodType.UNARY,
    appointment_pb.GetAppointmentByIdRequest,
    appointment_pb.AppointmentReply,
    (request: appointment_pb.GetAppointmentByIdRequest) => {
      return request.serializeBinary();
    },
    appointment_pb.AppointmentReply.deserializeBinary
  );

  getAppointmentById(
    request: appointment_pb.GetAppointmentByIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<appointment_pb.AppointmentReply>;

  getAppointmentById(
    request: appointment_pb.GetAppointmentByIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentReply) => void): grpcWeb.ClientReadableStream<appointment_pb.AppointmentReply>;

  getAppointmentById(
    request: appointment_pb.GetAppointmentByIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/GetAppointmentById',
        request,
        metadata || {},
        this.methodDescriptorGetAppointmentById,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/GetAppointmentById',
    request,
    metadata || {},
    this.methodDescriptorGetAppointmentById);
  }

  methodDescriptorGetAllAppointments = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/GetAllAppointments',
    grpcWeb.MethodType.UNARY,
    appointment_pb.Empty,
    appointment_pb.AppointmentsReply,
    (request: appointment_pb.Empty) => {
      return request.serializeBinary();
    },
    appointment_pb.AppointmentsReply.deserializeBinary
  );

  getAllAppointments(
    request: appointment_pb.Empty,
    metadata?: grpcWeb.Metadata | null): Promise<appointment_pb.AppointmentsReply>;

  getAllAppointments(
    request: appointment_pb.Empty,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentsReply) => void): grpcWeb.ClientReadableStream<appointment_pb.AppointmentsReply>;

  getAllAppointments(
    request: appointment_pb.Empty,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/GetAllAppointments',
        request,
        metadata || {},
        this.methodDescriptorGetAllAppointments,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/GetAllAppointments',
    request,
    metadata || {},
    this.methodDescriptorGetAllAppointments);
  }

  methodDescriptorGetAppointmentsByUserId = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/GetAppointmentsByUserId',
    grpcWeb.MethodType.UNARY,
    appointment_pb.GetAppointmentsByUserIdRequest,
    appointment_pb.AppointmentsReply,
    (request: appointment_pb.GetAppointmentsByUserIdRequest) => {
      return request.serializeBinary();
    },
    appointment_pb.AppointmentsReply.deserializeBinary
  );

  getAppointmentsByUserId(
    request: appointment_pb.GetAppointmentsByUserIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<appointment_pb.AppointmentsReply>;

  getAppointmentsByUserId(
    request: appointment_pb.GetAppointmentsByUserIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentsReply) => void): grpcWeb.ClientReadableStream<appointment_pb.AppointmentsReply>;

  getAppointmentsByUserId(
    request: appointment_pb.GetAppointmentsByUserIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/GetAppointmentsByUserId',
        request,
        metadata || {},
        this.methodDescriptorGetAppointmentsByUserId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/GetAppointmentsByUserId',
    request,
    metadata || {},
    this.methodDescriptorGetAppointmentsByUserId);
  }

  methodDescriptorGetAppointmentsByExpertId = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/GetAppointmentsByExpertId',
    grpcWeb.MethodType.UNARY,
    appointment_pb.GetAppointmentsByExpertIdRequest,
    appointment_pb.AppointmentsReply,
    (request: appointment_pb.GetAppointmentsByExpertIdRequest) => {
      return request.serializeBinary();
    },
    appointment_pb.AppointmentsReply.deserializeBinary
  );

  getAppointmentsByExpertId(
    request: appointment_pb.GetAppointmentsByExpertIdRequest,
    metadata?: grpcWeb.Metadata | null): Promise<appointment_pb.AppointmentsReply>;

  getAppointmentsByExpertId(
    request: appointment_pb.GetAppointmentsByExpertIdRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentsReply) => void): grpcWeb.ClientReadableStream<appointment_pb.AppointmentsReply>;

  getAppointmentsByExpertId(
    request: appointment_pb.GetAppointmentsByExpertIdRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: appointment_pb.AppointmentsReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/GetAppointmentsByExpertId',
        request,
        metadata || {},
        this.methodDescriptorGetAppointmentsByExpertId,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/GetAppointmentsByExpertId',
    request,
    metadata || {},
    this.methodDescriptorGetAppointmentsByExpertId);
  }

  methodDescriptorDeleteAppointment = new grpcWeb.MethodDescriptor(
    '/appointment.AppointmentService/DeleteAppointment',
    grpcWeb.MethodType.UNARY,
    appointment_pb.DeleteAppointmentRequest,
    appointment_pb.DeleteReply,
    (request: appointment_pb.DeleteAppointmentRequest) => {
      return request.serializeBinary();
    },
    appointment_pb.DeleteReply.deserializeBinary
  );

  deleteAppointment(
    request: appointment_pb.DeleteAppointmentRequest,
    metadata?: grpcWeb.Metadata | null): Promise<appointment_pb.DeleteReply>;

  deleteAppointment(
    request: appointment_pb.DeleteAppointmentRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (err: grpcWeb.RpcError,
               response: appointment_pb.DeleteReply) => void): grpcWeb.ClientReadableStream<appointment_pb.DeleteReply>;

  deleteAppointment(
    request: appointment_pb.DeleteAppointmentRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (err: grpcWeb.RpcError,
               response: appointment_pb.DeleteReply) => void) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ +
          '/appointment.AppointmentService/DeleteAppointment',
        request,
        metadata || {},
        this.methodDescriptorDeleteAppointment,
        callback);
    }
    return this.client_.unaryCall(
    this.hostname_ +
      '/appointment.AppointmentService/DeleteAppointment',
    request,
    metadata || {},
    this.methodDescriptorDeleteAppointment);
  }

}

